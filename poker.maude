load poker-lists-and-sets
load poker-card-number
load poker-card
load poker-deck
load poker-player-hand
load poker-player
load poker-point
load poker-game-board
load poker-kicker
load poker-final-hand
load poker-points-calculator
load poker-kicker-calculator
load poker-final-hand-builder
load poker-winner

mod POKER is
	pr POKER-LISTS-AND-SETS .
	pr POKER-CARD-NUMBER .
	pr POKER-CARD .
	pr POKER-DECK .
	pr POKER-PLAYER-HAND .
	pr POKER-POINT .
	pr POKER-GAME-BOARD .
	pr POKER-KICKER .
	pr POKER-FINAL-HAND .
	pr POKER-POINTS-CALCULATOR .
	pr POKER-KICKER-CALCULATOR .
	pr POKER-FINAL-HAND-BUILDER .
	pr POKER-PLAYER .
	pr POKER-WINNER .
	pr RANDOM .

	var P1 P2 : Player .
	var B : Board .
	var L : Deck .
	var N : Nat .
	var W : Winner .

	sort State .
	op ____ : Board Player Player Deck -> State [ctor] .
	op _____ : Board Player Player Deck Nat -> State [ctor] .
	op ______ : Board Player Player Deck Winner Nat -> State [ctor] .

	op draw : Deck -> [ReturnedDeckAndCard] .
	eq draw(D:Deck) = remove(D:Deck, random(length(D:Deck)) rem length(D:Deck)) .
	
	op cardsToP1 : State Nat -> [State] .
	eq cardsToP1(B:Board P1:Player P2:Player L:Deck, N:Nat) = B P1(< getReturnedCard(draw(L)) , getReturnedCard(draw(getReturnedDeck(draw(L)))) >) P2 getReturnedDeck(draw(getReturnedDeck(draw(L)))) N .

    crl [cardsToP1Rule] : B P1 P2 L N => cardsToP1(B P1 P2 L, N) if GetPlayerHand(P1) == <> .
    
    op cardsToP2 : State Nat -> [State] .
    eq cardsToP2(B:Board P1:Player P2:Player L:Deck, N:Nat) = B P1 P2(< getReturnedCard(draw(L)) , getReturnedCard(draw(getReturnedDeck(draw(L)))) >) getReturnedDeck(draw(getReturnedDeck(draw(L)))) N .
    
    crl [cardsToP2Rule] : B P1 P2 L N => cardsToP2(B P1 P2 L, N) if GetPlayerHand(P2) == <> and GetPlayerHand(P1) =/= <> .
    
    op flop : State Nat -> [State] .
    eq flop(B:Board P1:Player P2:Player L:Deck, N:Nat) = getReturnedCard(draw(L)) getReturnedCard(draw(getReturnedDeck(draw(L)))) getReturnedCard(draw(getReturnedDeck(draw(getReturnedDeck(draw(L)))))) [] [] P1 P2 getReturnedDeck(draw(getReturnedDeck(draw(getReturnedDeck(draw(L)))))) N .

    crl [flopRule] : B P1 P2 L N => flop(B P1 P2 L, N + 10) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) == [] and GetCard(B, 2) == [] and GetCard(B, 3) == [] .
    crl [flopRule] : B P1 P2 L N => flop(B P1 P2 L, N + 20) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) == [] and GetCard(B, 2) == [] and GetCard(B, 3) == [] .
    crl [flopRule] : B P1 P2 L N => flop(B P1 P2 L, N + 30) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) == [] and GetCard(B, 2) == [] and GetCard(B, 3) == [] .
    
    op turn : State Nat -> [State] .
    eq turn(B:Board P1:Player P2:Player L:Deck, N:Nat) = GetCard(B, 1) GetCard(B, 2) GetCard(B, 3) getReturnedCard(draw(L)) [] P1 P2 getReturnedDeck(draw(L)) N .
    
    crl [turnRule] : B P1 P2 L N => turn(B P1 P2 L, N + 10) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) == [] .
    crl [turnRule] : B P1 P2 L N => turn(B P1 P2 L, N + 20) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) == [] .
    crl [turnRule] : B P1 P2 L N => turn(B P1 P2 L, N + 30) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) == [] .
    
    op river : State Nat -> [State] .
    eq river(B:Board P1:Player P2:Player L:Deck, N:Nat) = GetCard(B, 1) GetCard(B, 2) GetCard(B, 3) GetCard(B, 4) getReturnedCard(draw(L)) P1 P2 getReturnedDeck(draw(L)) N .
    
    crl [riverRule] : B P1 P2 L N => river(B P1 P2 L, N + 10) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) =/= [] and GetCard(B, 5) == [] .
    crl [riverRule] : B P1 P2 L N => river(B P1 P2 L, N + 20) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) =/= [] and GetCard(B, 5) == [] .
    crl [riverRule] : B P1 P2 L N => river(B P1 P2 L, N + 30) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) =/= [] and GetCard(B, 5) == [] .

	op winner : State Nat -> [State] .
	eq winner(B:Board P1:Player P2:Player L:Deck, N:Nat) = B P1 P2 L Winner(P1 vs P2 board B) N .
	
    crl [winnerRule] : B P1 P2 L N => winner(B P1 P2 L, N) if GetPlayerHand(P1) =/= <> and GetPlayerHand(P2) =/= <> and GetCard(B, 1) =/= [] and GetCard(B, 2) =/= [] and GetCard(B, 3) =/= [] and GetCard(B, 4) =/= [] and GetCard(B, 5) =/= [] .

endm
