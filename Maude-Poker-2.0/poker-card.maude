fmod POKER-CARD is

	including POKER-CARD-NUMBER .
	sorts Suit Card .
	
	ops C D H S : -> Suit [ctor] .
	op [] : -> Card [ctor] .
	op [__] : Number Suit -> Card [ctor] .
	op CardNum : Card -> Number .
	op CardSuit : Card -> Suit .
	op _equals_ : Card Card -> Bool .
	op _>_ : Card Card -> Bool .
	op _<_ : Card Card -> Bool .
	op _=f=_ : Card Card -> Bool .
	ops GetHigherCard GetLowerCard : Card Card -> Card .
	ops GetHCard GetSecondHCard GetThirdHCard : Card Card Card -> Card .
	
	var N : Number .
	var L : Suit .
	vars X Y Z V W : Card .
	
	eq CardNum([N L]) = N .
	eq CardSuit([N L]) = L . 
	
	ceq _equals_(X, Y) = true if CardNum(X) == CardNum(Y) .
	eq _equals_(X, Y) = false [owise] .
	
	ceq _>_(X, Y) = true if CardNum(X) > CardNum(Y) .
	ceq _>_(X, Y) = true if X =/= [] and Y == [] .
	eq _>_(X, Y) = false [owise] .
	
	ceq _<_(X, Y) = true if not X equals Y and not X > Y .
	eq _<_(X, Y) = false [owise] .

	ceq _=f=_(X, Y) = true if CardSuit(X) == CardSuit(Y) .
	eq _=f=_(X, Y) = false [owise] .

	ceq GetHigherCard(X, Y) = X if X > Y .
	eq GetHigherCard(X, Y) = Y [owise] .

	ceq GetLowerCard(X, Y) = X if X < Y .
	eq GetLowerCard(X, Y) = Y [owise] .

	*** 2 6 8 4 1

	*** Three cards 
	ceq GetHCard(X, Y, Z) = X if X > Y and X > Z .
	ceq GetHCard(X, Y, Z) = Y if Y > X and Y > Z .
	eq GetHCard(X, Y, Z) = Z [owise] .

	ceq GetSecondHCard(X, Y, Z) = X if X < GetHCard(X, Y, Z) and X > GetThirdHCard(X, Y, Z) .
	ceq GetSecondHCard(X, Y, Z) = Y if Y < GetHCard(X, Y, Z) and Y > GetThirdHCard(X, Y, Z) .
	eq GetSecondHCard(X, Y, Z) = Z [owise] .

	ceq GetThirdHCard(X, Y, Z) = X if X < Y and X < Z .
	ceq GetThirdHCard(X, Y, Z) = Y if Y < X and Y < Z .
	eq GetThirdHCard(X, Y, Z) = Z [owise] .

endfm

view Card from TRIV to POKER-CARD is
	sort Elt to Card .
endv

view Card< from STRICT-TOTAL-ORDER to POKER-CARD is
	sort Elt to Card .
endv