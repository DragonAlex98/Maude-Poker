fmod POKER-POINTS-CALCULATOR is

	*** including POKER-PLAYER .
	including POKER-POINT .
	including POKER-PLAYER-HAND .
	including POKER-GAME-PLATE .
	
	*** vars P L : Player .
	vars X Y : PlayerHand .
	vars Z : Plate .

	*** Check pairs
	ops CheckPairs CheckDPairs CheckTris Flush CheckFull CheckPoker : PlayerHand Plate -> Point .
	
	ceq CheckPairs(X, Z) = Pairs(GetCard(X, 1)) if HasPairs(X) and NoPoints(Z) .
	ceq CheckPairs(X, Z) = Pairs(GetCard(X, 1)) if HasCard(Z, GetCard(X, 1)) .
	ceq CheckPairs(X, Z) = Pairs(GetCard(X, 2)) if HasCard(Z, GetCard(X, 2)) .
	ceq CheckPairs(X, Z) = Pairs(GetPairs(Z)) if NoPoints(X) and HasPairs(Z) .
	eq CheckPairs(X, Z) = HCard [owise] .
	
	*** Check Double Pairs
	ceq CheckDPairs(X, Z) = DPairs(GetCard(X, 1), GetPairs(Z)) if HasPairs(X) and HasPairs(Z) .
	ceq CheckDPairs(X, Z) = DPairs(GetCard(X, 1), GetPairs(Z)) if HasCard(Z, GetCard(X, 1)) and HasPairs(Z) and not HasPairsOf(Z, GetCard(X, 1)) .
	ceq CheckDPairs(X, Z) = DPairs(GetCard(X, 2), GetPairs(Z)) if HasCard(Z, GetCard(X, 2)) and HasPairs(Z) and not HasPairsOf(Z, GetCard(X, 2)) .
	ceq CheckDPairs(X, Z) = DPairs(GetCard(X, 1), GetCard(X, 2)) if HasCard(Z, GetCard(X, 1)) and HasCard(Z, GetCard(X, 2)) .
	ceq CheckDPairs(X, Z) = GetDPairs(Z) if NoPoints(X) and HasDPairs(Z) .
	eq CheckDPairs(X, Z) = CheckPairs(X, Z) [owise] .

	*** Check Tris
	ceq CheckTris(X, Z) = Tris(GetCard(X, 1)) if HasPairsOf(Z, GetCard(X, 1)) .
	ceq CheckTris(X, Z) = Tris(GetCard(X, 2)) if HasPairsOf(Z, GetCard(X, 2)) .
	ceq CheckTris(X, Z) = Tris(GetCard(X, 1)) if HasPairs(X) and HasCard(Z, GetCard(X, 1)) .
	ceq CheckTris(X, Z) = GetTris(Z) if NoPoints(X) and HasTris(Z) .
	eq CheckTris(X, Z) = CheckDPairs(X, Z) [owise] .

	*** Check Flush
	*** ceq Flush(X, Z) = Flush if HasFlushPair(X) and HasFlushTrisOf(Z, GetCard(X, 1)) .
	*** ceq Flush(X, Z) = Flush if HasFlushPokerOf(Z, GetCard(X, 1)) .
	*** ceq Flush(X, Z) = Flush if HasFlushPokerOf(Z, GetCard(X, 2)) .
	*** ceq Flush(X, Z) = Flush if HasFullFlush(Z) .
	*** eq Flush(X, Z) = Tris(X, Z) [owise] .

	*** Check Full House
	ceq CheckFull(X, Z) = Full(Pairs(GetFirstCardOf(CheckDPairs(X, Z))), CheckTris(X, Z)) if ToNat(CheckDPairs(X, Z)) == 3 and ToNat(CheckTris(X, Z)) == 4 and not GetFirstCardOf(CheckDPairs(X, Z)) equals GetCardOf(CheckTris(X, Z)) .
	ceq CheckFull(X, Z) = Full(Pairs(GetSecondCardOf(CheckDPairs(X, Z))), CheckTris(X, Z)) if ToNat(CheckDPairs(X, Z)) == 3 and ToNat(CheckTris(X, Z)) == 4 and not GetSecondCardOf(CheckDPairs(X, Z)) equals GetCardOf(CheckTris(X, Z)) .
	ceq CheckFull(X, Z) = Full(CheckPairs(X, Z), GetTris(Z)) if HasPairs(X) and HasTris(Z) .
	eq CheckFull(X, Z) = CheckTris(X, Z) [owise] .

	*** Check Poker
	ceq CheckPoker(X, Z) = Poker(GetCard(X, 1)) if HasTrisOf(Z, GetCard(X, 1)) .
	ceq CheckPoker(X, Z) = Poker(GetCard(X, 2)) if HasTrisOf(Z, GetCard(X, 2)) .
	ceq CheckPoker(X, Z) = Poker(GetCard(X, 1)) if HasPairs(X) and HasPairsOf(Z, GetCard(X, 1)) .
	ceq CheckPoker(X, Z) = GetPoker(Z) if HasPoker(Z) .
	eq CheckPoker(X, Z) = CheckFull(X, Z) [owise] .

	*** Evaluator
	op EvaluateHand : PlayerHand Plate -> Point .

	eq EvaluateHand(X, Z) = CheckPoker(X, Z) .

endfm