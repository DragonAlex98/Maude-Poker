fmod POKER-POINT is

	including POKER-CARD .
	sort Point .

	op ToNat : Point -> Nat .
	ops _>_ _<_ _equals_ : Point Point -> Bool .

	vars X Y : Point .
	vars Z V W L M : Card .
	vars T R : Nat .

	*** Points
	op HCard : -> Point [ctor] .
	ops Pairs Tris Poker : Card -> Point [ctor] .
	op Straight : Nat -> Point [ctor] .
	op DPairs : Card Card -> Point [ctor] .
	op Flush : -> Point [ctor] .
	op Full : Point Point -> Point [ctor] .
	op GetCardOf : Point -> Card .
	ops GetFirstCardOf GetSecondCardOf : Point -> Card .

	eq GetCardOf(Pairs(Z)) = Z .
	eq GetCardOf(Tris(Z)) = Z .
	eq GetCardOf(Poker(Z)) = Z .

	eq GetFirstCardOf(DPairs(Z, V)) = Z .
	eq GetFirstCardOf(Full(Tris(Z), Pairs(V))) = Z .

	eq GetSecondCardOf(DPairs(Z, V)) = V .
	eq GetSecondCardOf(Full(Tris(Z), Pairs(V))) = V .

	eq ToNat(HCard) = 1 .
	eq ToNat(Pairs(Z)) = 2 .
	eq ToNat(DPairs(Z, V)) = 3 .
	eq ToNat(Tris(Z)) = 4 .
	eq ToNat(Straight(T)) = 5 .
	eq ToNat(Flush) = 6 .
	eq ToNat(Full(Tris(Z), Pairs(V))) = 7 .
	eq ToNat(Poker(Z)) = 8 .

	ceq _>_(Pairs(Z), Pairs(V)) = true if Z > V .
	ceq _>_(DPairs(Z, V), DPairs(W, L)) = true if GetHigherCard(Z, V) > GetHigherCard(W, L) . *** A 3 | A K ?
	ceq _>_(DPairs(Z, V), DPairs(W, L)) = true if GetHigherCard(Z, V) equals GetHigherCard(W, L) and GetLowerCard(Z, V) > GetLowerCard(W, L) .
	ceq _>_(Tris(Z), Tris(V)) = true if Z > V .
	ceq _>_(Straight(T), Straight(R)) = true if T > R .
	ceq _>_(Full(Tris(Z), Pairs(V)), Full(Tris(W), Pairs(L))) = true if Tris(Z) > Tris(W) .
	ceq _>_(Full(Tris(Z), Pairs(V)), Full(Tris(W), Pairs(L))) = true if Tris(Z) equals Tris(W) and Pairs(V) > Pairs(L) .
	ceq _>_(Poker(Z), Poker(V)) = true if Z > V .
	ceq _>_(X, Y) = true if ToNat(X) > ToNat(Y) .
	eq _>_(X, Y) = false [owise] .

	ceq _equals_(Pairs(Z), Pairs(V)) = true if Z equals V .
	ceq _equals_(DPairs(Z, V), DPairs(W, L)) = true if Z equals W and V equals L .
	ceq _equals_(DPairs(Z, V), DPairs(W, L)) = true if Z equals L and V equals W .
	ceq _equals_(Tris(Z), Tris(V)) = true if Z equals V .
	ceq _equals_(Straight(T), Straight(R)) = true if T == R .
	ceq _equals_(Full(Tris(Z), Pairs(V)), Full(Tris(W), Pairs(L))) = true if Tris(Z) equals Tris(W) and Pairs(V) equals Pairs(L) .
	ceq _equals_(Poker(Z), Poker(V)) = true if Z equals V .
	eq _equals_(X, Y) = false [owise] .
	
	ceq _<_(X, Y) = true if not X > Y and not X equals Y .
	eq _<_(X, Y) = false [owise] .

endfm