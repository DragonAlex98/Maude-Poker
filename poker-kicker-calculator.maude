fmod POKER-KICKER-CALCULATOR is

	including POKER-POINT .
	including POKER-GAME-BOARD .
	including POKER-PLAYER-HAND .
	including POKER-KICKER .
	including POKER-LISTS-AND-SETS .

	var PH : PlayerHand .
	var PL : Board .
	var P : Point .
	var G : Suit .
	var S : Set{Nat} .
	var N : Nat .

	vars X Y Z U V W J : Card .

	*** Get the union of the player hand and the Board (without repetitions of elements)
	op GetAsSet : PlayerHand Board -> Set{Nat} .

	eq GetAsSet(PH, PL) = union(GetAsSet(PH), GetAsSet(PL)) .

	*** Get the union of the player hand and the Board (without repetitions of elements)
	op GetAsFlushList : PlayerHand Board Suit -> List{Nat<} .

	eq GetAsFlushList(PH, PL, G) = append(GetAsListOfFlush(PH, G), GetAsListOfFlush(PL, G)) .


	*** Delete the point cards from the set
	op DeletePointFromSet : Set{Nat} Point -> Set{Nat} .

	eq DeletePointFromSet(S, HCard) = S .

	eq DeletePointFromSet(S, Pairs(X)) = delete(ToNat(CardNum(X)), S) .
	eq DeletePointFromSet(S, Tris(X)) = delete(ToNat(CardNum(X)), S) .
	eq DeletePointFromSet(S, Poker(X)) = delete(ToNat(CardNum(X)), S) .

	eq DeletePointFromSet(S, Full(Tris(Y), Pairs(X))) = S \ ( ToNat(CardNum(X)), ToNat(CardNum(Y)) ) .
	eq DeletePointFromSet(S, DPairs(X, Y)) = S \ ( ToNat(CardNum(X)), ToNat(CardNum(Y)) ) .

	*** Get the set as a sortable list (sorted from higher to lower)
	op GetSetAsList : Set{Nat} -> List{Nat<} .

	eq GetSetAsList(S) = makeList(S) .

	*** Get the kicker
	op GetKicker : PlayerHand Board Point -> Kicker .

	eq GetKicker(PH, PL, Flush(G)) = GetKicker( GetAsFlushList(PH, PL, G) ) .
	eq GetKicker(PH, PL, Straight(N)) = nil .
	eq GetKicker(PH, PL, P) = GetKicker( GetSetAsList( DeletePointFromSet( GetAsSet(PH, PL), P) ) ) .

endfm